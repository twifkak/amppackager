// Code generated by protoc-gen-go. DO NOT EDIT.
// source: amphtmltransformer/amphtmltransformer.proto

/*
Package google_search_amphtmltransformer_v1 is a generated protocol buffer package.

It is generated from these files:
	amphtmltransformer/amphtmltransformer.proto

It has these top-level messages:
	TransformAmpHtmlRequest
	TransformAmpHtmlResponse
	ResponseHeader
*/
package google_search_amphtmltransformer_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request containing an AMP HTML Document to be transformed.
type TransformAmpHtmlRequest struct {
	// Contents of a valid AMP HTML document. The encoding format must be
	// interchange valid UTF8, or may result in an error.
	AmpHtmlDocumentBody []byte `protobuf:"bytes,1,opt,name=amp_html_document_body,json=ampHtmlDocumentBody,proto3" json:"amp_html_document_body,omitempty"`
	// The internet addressable URL of the AMP HTML document. Must be an absolute
	// value with an 'https' protocol.
	AmpHtmlDocumentUrl []byte `protobuf:"bytes,2,opt,name=amp_html_document_url,json=ampHtmlDocumentUrl,proto3" json:"amp_html_document_url,omitempty"`
}

func (m *TransformAmpHtmlRequest) Reset()                    { *m = TransformAmpHtmlRequest{} }
func (m *TransformAmpHtmlRequest) String() string            { return proto.CompactTextString(m) }
func (*TransformAmpHtmlRequest) ProtoMessage()               {}
func (*TransformAmpHtmlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransformAmpHtmlRequest) GetAmpHtmlDocumentBody() []byte {
	if m != nil {
		return m.AmpHtmlDocumentBody
	}
	return nil
}

func (m *TransformAmpHtmlRequest) GetAmpHtmlDocumentUrl() []byte {
	if m != nil {
		return m.AmpHtmlDocumentUrl
	}
	return nil
}

// Response containing a "transformed AMP HTML" document.
type TransformAmpHtmlResponse struct {
	// Contents of a "transformed AMP HTML" document. The encoding format will
	// be interchange valid UTF8. This document will be suitible for serving
	// on the AMP Cache without further modification. This field is only set
	// if both `is_valid_document_body` and `is_valid_document_url` are true.
	TransformedDocumentBody []byte `protobuf:"bytes,1,opt,name=transformed_document_body,json=transformedDocumentBody,proto3" json:"transformed_document_body,omitempty"`
	// HTTP response headers for the "transformed AMPTHML" document. These will
	// include resource preload headers, such as those for AMP Javascript. This
	// will also include an X-AMP-Cache-Signature header with a signature that
	// must be included for the AMP cache to serve the document. This is not a
	// complete set of response headers. It only includes those specifically
	// required by the AMP Cache for a "transformed AMPTHML" document. Clients
	// should add additional headers before serving this response.
	TransformedResponseHeaders []*ResponseHeader `protobuf:"bytes,2,rep,name=transformed_response_headers,json=transformedResponseHeaders" json:"transformed_response_headers,omitempty"`
	// True iff the amp_html_document_body in the `TransformAmpHtmlRequest` is
	// valid AMP HTML. This field can be used for debugging why the
	// `transformed_document_body` is unset.
	IsValidDocumentBody bool `protobuf:"varint,3,opt,name=is_valid_document_body,json=isValidDocumentBody" json:"is_valid_document_body,omitempty"`
	// True iff the amp_html_document_url in the `TransformAmpHtmlRequest` is
	// valid for transforming the given AMP HTML document. This field can be
	// used for debugging why the `transformed_document_body` is unset.
	IsValidDocumentUrl bool `protobuf:"varint,4,opt,name=is_valid_document_url,json=isValidDocumentUrl" json:"is_valid_document_url,omitempty"`
}

func (m *TransformAmpHtmlResponse) Reset()                    { *m = TransformAmpHtmlResponse{} }
func (m *TransformAmpHtmlResponse) String() string            { return proto.CompactTextString(m) }
func (*TransformAmpHtmlResponse) ProtoMessage()               {}
func (*TransformAmpHtmlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransformAmpHtmlResponse) GetTransformedDocumentBody() []byte {
	if m != nil {
		return m.TransformedDocumentBody
	}
	return nil
}

func (m *TransformAmpHtmlResponse) GetTransformedResponseHeaders() []*ResponseHeader {
	if m != nil {
		return m.TransformedResponseHeaders
	}
	return nil
}

func (m *TransformAmpHtmlResponse) GetIsValidDocumentBody() bool {
	if m != nil {
		return m.IsValidDocumentBody
	}
	return false
}

func (m *TransformAmpHtmlResponse) GetIsValidDocumentUrl() bool {
	if m != nil {
		return m.IsValidDocumentUrl
	}
	return false
}

// ResponseHeader contains an HTTP Response header name/value pair.
type ResponseHeader struct {
	// HTTP Response header name.
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// HTTP Response header value.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseHeader) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ResponseHeader) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*TransformAmpHtmlRequest)(nil), "google.search.amphtmltransformer.v1.TransformAmpHtmlRequest")
	proto.RegisterType((*TransformAmpHtmlResponse)(nil), "google.search.amphtmltransformer.v1.TransformAmpHtmlResponse")
	proto.RegisterType((*ResponseHeader)(nil), "google.search.amphtmltransformer.v1.ResponseHeader")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AmpHtmlTransformer service

type AmpHtmlTransformerClient interface {
	// Interface for transforming an AMP HTML Document into a "transformed
	// AMP HTML" document.
	TransformAmpHtml(ctx context.Context, in *TransformAmpHtmlRequest, opts ...grpc.CallOption) (*TransformAmpHtmlResponse, error)
}

type ampHtmlTransformerClient struct {
	cc *grpc.ClientConn
}

func NewAmpHtmlTransformerClient(cc *grpc.ClientConn) AmpHtmlTransformerClient {
	return &ampHtmlTransformerClient{cc}
}

func (c *ampHtmlTransformerClient) TransformAmpHtml(ctx context.Context, in *TransformAmpHtmlRequest, opts ...grpc.CallOption) (*TransformAmpHtmlResponse, error) {
	out := new(TransformAmpHtmlResponse)
	err := grpc.Invoke(ctx, "/google.search.amphtmltransformer.v1.AmpHtmlTransformer/TransformAmpHtml", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AmpHtmlTransformer service

type AmpHtmlTransformerServer interface {
	// Interface for transforming an AMP HTML Document into a "transformed
	// AMP HTML" document.
	TransformAmpHtml(context.Context, *TransformAmpHtmlRequest) (*TransformAmpHtmlResponse, error)
}

func RegisterAmpHtmlTransformerServer(s *grpc.Server, srv AmpHtmlTransformerServer) {
	s.RegisterService(&_AmpHtmlTransformer_serviceDesc, srv)
}

func _AmpHtmlTransformer_TransformAmpHtml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformAmpHtmlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmpHtmlTransformerServer).TransformAmpHtml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.search.amphtmltransformer.v1.AmpHtmlTransformer/TransformAmpHtml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmpHtmlTransformerServer).TransformAmpHtml(ctx, req.(*TransformAmpHtmlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmpHtmlTransformer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.search.amphtmltransformer.v1.AmpHtmlTransformer",
	HandlerType: (*AmpHtmlTransformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformAmpHtml",
			Handler:    _AmpHtmlTransformer_TransformAmpHtml_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "amphtmltransformer/amphtmltransformer.proto",
}

func init() { proto.RegisterFile("amphtmltransformer/amphtmltransformer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xdd, 0xb4, 0x4a, 0x19, 0x45, 0x64, 0xaa, 0x6d, 0x2c, 0x1e, 0x4a, 0xbd, 0x14, 0x84,
	0x48, 0xdb, 0x83, 0x20, 0x2a, 0x58, 0x3c, 0xf4, 0x1c, 0xaa, 0xd7, 0xb0, 0x6d, 0xd6, 0xb6, 0xb0,
	0x9b, 0x8d, 0xbb, 0x9b, 0x42, 0x1f, 0xc0, 0x07, 0xf0, 0x2d, 0x7c, 0x05, 0xdf, 0x4e, 0xf2, 0xa7,
	0xb4, 0x49, 0x2c, 0x14, 0x6f, 0xc9, 0xcc, 0xfc, 0x66, 0xbf, 0xf9, 0x66, 0xe0, 0x86, 0x8a, 0x70,
	0x6e, 0x04, 0x37, 0x8a, 0x06, 0xfa, 0x5d, 0x2a, 0xc1, 0xd4, 0x6d, 0x39, 0xe4, 0x84, 0x4a, 0x1a,
	0x89, 0xd7, 0x33, 0x29, 0x67, 0x9c, 0x39, 0x9a, 0x51, 0x35, 0x9d, 0x3b, 0x7f, 0xd4, 0x2d, 0x7b,
	0x9d, 0x4f, 0x02, 0xcd, 0xf1, 0x3a, 0xf4, 0x2c, 0xc2, 0x91, 0x11, 0xdc, 0x65, 0x1f, 0x11, 0xd3,
	0x06, 0xef, 0xa0, 0x41, 0x45, 0xe8, 0xc5, 0x94, 0xe7, 0xcb, 0x69, 0x24, 0x58, 0x60, 0xbc, 0x89,
	0xf4, 0x57, 0x36, 0x69, 0x93, 0xee, 0xc9, 0xd0, 0xaa, 0x11, 0xb7, 0x4e, 0x53, 0xe6, 0x25, 0xcb,
	0x0f, 0xa5, 0xbf, 0xc2, 0x1e, 0x5c, 0x94, 0xc1, 0x48, 0x71, 0xdb, 0x8a, 0x39, 0x17, 0x0b, 0xcc,
	0xab, 0xe2, 0x9d, 0x1f, 0x0b, 0xec, 0xb2, 0x0e, 0x1d, 0xca, 0x40, 0x33, 0x7c, 0x82, 0xcb, 0x8d,
	0x6c, 0x7f, 0xa7, 0x96, 0xe6, 0x56, 0x51, 0x4e, 0x4f, 0x04, 0x57, 0xdb, 0xbc, 0xca, 0xfa, 0x7a,
	0x73, 0x46, 0x7d, 0xa6, 0xb4, 0x6d, 0xb5, 0x2b, 0xdd, 0xe3, 0xfe, 0xc0, 0xd9, 0xc3, 0x30, 0x67,
	0x2d, 0x6a, 0x94, 0xb0, 0x6e, 0x6b, 0xab, 0x71, 0x3e, 0xa5, 0x71, 0x00, 0x8d, 0x85, 0xf6, 0x96,
	0x94, 0x2f, 0x8a, 0x9a, 0x2b, 0x6d, 0xd2, 0xad, 0xb9, 0xf5, 0x85, 0x7e, 0x8b, 0x93, 0x45, 0xef,
	0xca, 0x50, 0xec, 0x5d, 0x35, 0x61, 0xb0, 0xc0, 0xc4, 0xde, 0xdd, 0xc3, 0x69, 0xfe, 0x69, 0x44,
	0xa8, 0x06, 0x54, 0xb0, 0xd4, 0x1b, 0x37, 0xf9, 0xc6, 0x73, 0x38, 0x5c, 0x52, 0x1e, 0xb1, 0x6c,
	0x09, 0xe9, 0x4f, 0xff, 0x9b, 0x00, 0x66, 0x76, 0x8f, 0x37, 0x83, 0xe2, 0x17, 0x81, 0xb3, 0xe2,
	0x3a, 0xf0, 0x61, 0x2f, 0x83, 0x76, 0x5c, 0x53, 0xeb, 0xf1, 0x9f, 0x74, 0x3a, 0x58, 0xe7, 0x60,
	0x72, 0x94, 0x9c, 0xf5, 0xe0, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xff, 0x2d, 0xb9, 0x05, 0x03,
	0x00, 0x00,
}
